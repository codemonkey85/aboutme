@page "/resume"

<PageTitle>
    Michael Bond - Résumé
</PageTitle>

<MudText Typo="@Typo.h3">
    My Résumé
</MudText>

<MudText Typo="@Typo.h5">
    @resumeModel.Name
</MudText>

<MudText Typo="@Typo.body1">
    @resumeModel.Summary
</MudText>

<MudLink Href="@($"mailto:{resumeModel.Email}?subject=Resume")">
    @resumeModel.Email
</MudLink>

<MudText Typo="@Typo.body1">
    <MudButton Href="https://github.com/codemonkey85/"
               Target="_blank"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               EndIcon="@Icons.Custom.Brands.GitHub">
        Follow me on GitHub
    </MudButton>
</MudText>

<MudDivider DividerType="@DividerType.FullWidth"
            Class="my-2" />

@if (resumeModel.Skills is { Count: > 0 })
{
    <MudStack Row="@true">
        <MudText Typo="@Typo.h5"
                 Class="mb-3">
            Skills
        </MudText>
        @if (SelectedSkills.Any())
        {
            <MudIconButton OnClick="@ClearSelectedSkills"
                           Variant="@Variant.Filled"
                           Color="@Color.Default"
                           Size="@Size.Small"
                           Icon="@Icons.Material.Filled.Clear"
                           Title="Clear Selection" />
        }
    </MudStack>
    @SkillsFragment(resumeModel.Skills)
}

@if (resumeModel.Jobs is { Count: > 0 })
{
    <MudText Typo="@Typo.h5"
             Class="mb-3">
        Experience
    </MudText>
    <MudStack Spacing="3"
              Class="mb-3">
        @foreach (var job in resumeModel.Jobs
       .Where(job => !SelectedSkills.Any() || SelectedSkills.All(job.SkillsUsed.Contains))
       .OrderByDescending(job => job.PresentlyEmployed)
       .ThenByDescending(job => job.EndDate))
        {
            <MudCard>
                <MudCardHeader>
                    <MudStack Spacing="0">
                        <MudText Typo="@Typo.h5">
                            @job.Title
                        </MudText>
                        <MudText Typo="@Typo.subtitle1">
                            @job.Company
                        </MudText>
                        <MudText Typo="@Typo.body2">
                            @($"{job.StartDate:MMM yyyy} - {(job.EndDate is null ? "Present" : $"{job.EndDate:MMM yyyy}")}")
                        </MudText>
                    </MudStack>
                </MudCardHeader>
                <MudCardContent>
                    @if (job.Summary is { Length: > 0 })
                    {
                        <MudText Typo="@Typo.body1"
                                 Class="mb-3">
                            @job.Summary
                        </MudText>
                    }
                    @if (job.SkillsUsed is { Count: > 0 })
                    {
                        @SkillsFragment(job.SkillsUsed)
                    }
                    @if (job.Duties is { Count: > 0 })
                    {
                        <ul>
                            @foreach (var duty in job.Duties)
                            {
                                if (duty.Description is { Length: > 0 })
                                {
                                    <li>
                                        @duty.Description
                                    </li>
                                }
                            }
                        </ul>
                    }
                </MudCardContent>
            </MudCard>
        }
    </MudStack>
}

<style>
    ul, li {
        list-style: initial;
        margin-left: 0.5rem;
    }
</style>

@code {
    private RenderFragment SkillsFragment(IEnumerable<Skill> skills) =>
    @<MudGrid Class="mb-3"
                  Spacing="0">
        @foreach (var skill in skills.OrderBy(skill => skill.Name))
    {
        <MudItem>
            <MudChip title="@skill.Name"
                     OnClick="@(() => OnSelectSkill(skill))"
                     Color="@GetSkillColor(skill)">
                @skill.Name
            </MudChip>
        </MudItem>
    }
    </MudGrid>;
}
